{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#github","title":"GitHub","text":""},{"location":"#support","title":"Support","text":""},{"location":"#purpose","title":"Purpose","text":"<p>Simple UI driven way to manage updates &amp; notifications for Docker containers. No external database is required, all settings are stored locally in an sqlite3 database.</p>"},{"location":"#project-support","title":"Project support","text":"<p>If the project is useful for you, do us a favor and smash that star button on the Github page! If you want to support the project financially we do appreciate it and you can do that on the Notifiarr Github sponsor page. Added bonus with that is if you also use Notifiarr you can link your Github account and get patron perks there too!</p>"},{"location":"#features-or-bugs","title":"Features or bugs","text":"<p>If there is a feature you would like added or think you have found a bug, please join the discord and lets discuss it there in real time before doing a Github request. After we determine what to do (add a new feature or confirm the bug) we can move it to Github if necessary although most things can be fixed fast enough that it wont be needed.</p>"},{"location":"#notification-options","title":"Notification options","text":""},{"location":"#triggers","title":"Triggers","text":"<ul> <li>Container (re-)created/removed</li> <li>Container state changes (running -&gt; stopped or healthy -&gt; unhealthy)</li> <li>Update for container image tag is available</li> <li>Update for container image tag has been applied</li> <li>Orphan images, volumes &amp; networks are pruned</li> <li>Memory and CPU usage is over a set limit</li> </ul>"},{"location":"#platforms","title":"Platforms","text":"<ul> <li>Mattermost</li> <li>Notifiarr</li> <li>Telegram</li> </ul>"},{"location":"#updating-options","title":"Updating options","text":"<p>Updates are applied on a container by container basis and use cron scheduling for flexibility</p> <ul> <li>Ignore updates</li> <li>Check for updates</li> <li>Auto update</li> </ul>"},{"location":"#other-features","title":"Other features","text":"<ul> <li>Link and control multiple Dockwatch installs (other servers)</li> <li>Automatically locate and match container icons for non Unraid usage*</li> <li>Update schedules for container image tags by a container basis</li> <li>Notifications by a container basis</li> <li>Automatically try to restart unhealthy containers</li> <li>Mass prune orphan images, volumes &amp; networks</li> <li>Mass actions for containers [(re-)start/stop, pull, update]**</li> <li>Group containers in a table view for easier management</li> </ul> <p>* If icon is available at Notifiarr/images ** Also includes generating a docker run command, docker-compose.yml and comparing mounts.</p>"},{"location":"#screenshots","title":"Screenshots","text":"<p>Note</p> <p>These might differ slightly from time to time as the UI can change faster than the wiki might be updated.</p>"},{"location":"#interface","title":"Interface","text":""},{"location":"#servers","title":"Servers","text":""},{"location":"#overview","title":"Overview","text":""},{"location":"#containers","title":"Containers","text":""},{"location":"#container","title":"Container","text":""},{"location":"#container-compose","title":"Container compose","text":""},{"location":"#networks","title":"Networks","text":""},{"location":"#compose","title":"Compose","text":""},{"location":"#orphans","title":"Orphans","text":""},{"location":"#notifications","title":"Notifications","text":""},{"location":"#settings","title":"Settings","text":""},{"location":"#tasks","title":"Tasks","text":""},{"location":"#commands","title":"Commands","text":""},{"location":"#logs","title":"Logs","text":""},{"location":"#notifiarr-notifications","title":"Notifiarr notifications","text":""},{"location":"#telegram-notifications","title":"Telegram notifications","text":""},{"location":"pages/commands/","title":"Commands","text":"<p>This page will allow you to run specific commands against your docker install &amp; is mainly used for troubleshooting without having to use the shell for common things.</p> <p>If you have multiple servers linked, you can run these commands on multiple servers and compare the results as well</p>"},{"location":"pages/compose/","title":"Compose","text":"<p>Warning</p> <p>This feature is still a work in progress on everything it will be able to do</p>"},{"location":"pages/compose/#current-usage","title":"Current usage","text":"<p>Currently you can store compose files locally with Dockwatch so that you can pull or create stacks from the interface instead of having to use the shell for everything</p>"},{"location":"pages/compose/#future-usage","title":"Future usage","text":"<p>In the future there are plans to make Dockwatch much smarter about how it can utilize compose files. This will allow it to properly pull and create conainers via the compose mechanism instead of the docker api</p>"},{"location":"pages/containers/groups/","title":"Groups","text":"<p>This modal will allow you to group similar containers and organize the container table</p> <p>You can add as many groups as you like and then assign containers to them. One container can be assigned to one group at a time which means if a container is already in another group then the list will not have a checkbox next to the container and the <code>Existing Group</code> column will show which group that container belongs to.</p> <p>If you want to remove a container from a group or change its group, load the group from the group drop down and uncheck it and save. This will unassign its group and allow you to move it to another group or leave it ungrouped.</p>"},{"location":"pages/containers/table/","title":"Table","text":"<p>The containers table is pretty straight forward but we will cover some of the \"not so obvious\" things</p>"},{"location":"pages/containers/table/#column-visibility","title":"Column visibility","text":"<p>Self explanatory but you can pick which columns you do or do not want to see</p>"},{"location":"pages/containers/table/#container-table","title":"Container table","text":"<ul> <li><code>Real time updates</code>: This will auto reload the table rows every 60 seconds if the SSE task is enabled</li> <li><code>Search</code>: Filter out rows in the table</li> <li><code>With selected</code>: This will apply the selected change to all checked containers at once</li> </ul>"},{"location":"pages/containers/table/#columns","title":"Columns","text":"<p>If you utilize groups, they are listed first in the table and you click on the group name to show the container information for the group</p> <p><code>Name</code>: Click on a container to get a menu, from that menu you can make container specific changes and see some information about the container such as its network, labels, environment variables, etc. Under the container name is the repository for that container. NOTE Editing containers will show the interface but does not have a save button yet as it is still a WIP</p> <p><code>Updates</code>: This shows you information about your container setting with updates on or off. If updates are on (check only or apply) it will show you either \"Outdated\" or \"Up to date\" for the container. If you have it set to ignore it will show you \"Ignored\". Under the status is the current hash for the image you have.</p> <p><code>State</code>: This is the current state of the container (running, exited, created, etc) and the amount of time the container has been in that state</p> <p><code>Health</code>: This column will show you the health status of the container if it supports it and an icon to show if you have auto restart unhealthy on or off</p> <p><code>Mounts</code>: This column shows you all the mounts the given container has, the initial view is truncated but you can click the [+] icon to view them all</p> <p><code>Environment</code>: This column shows you all the environment variables the given container has, the initial view is truncated but you can click the [+] icon to view them all</p> <p><code>Ports</code>: This column shows you all the ports the given container uses, the initial view is truncated but you can click the [+] icon to view them all</p> <p><code>CPU/MEM</code>: This column shows your container usage per dockers usage (not entire server)</p>"},{"location":"pages/containers/updates/","title":"Updates","text":"<p>This modal will allow you to pick and choose which container updates when and its update settings</p> <p>Info</p> <p>You have the option to set them in mass or container by container as well</p>"},{"location":"pages/containers/updates/#update","title":"Update","text":"<p>Pick the update option you want</p> <ul> <li><code>Ignore</code>: This will not check for updates or try to update the container at all</li> <li><code>Check for updates</code>: This uses regctl to check for changes in the container and can alert you when an update is available but will not update the container</li> <li><code>Auto update</code>: This will use regctl to check for a change and pull the changes as needed to automatically update the container and alert you when this happens</li> </ul>"},{"location":"pages/containers/updates/#frequency","title":"Frequency","text":"<p>This is how often you want to do the update option (assuming you did not pick Ignore) and uses the standard cron frequency. There is a limitation to the minute selection to try and mitigate repositories being overloaded/abused for excessive update checking.</p> <p>When you click on the frequency box you will get a popup to help pick the frequency you want for those who are not familiar with cron expression formats.</p> <p>Here is how to understand cron frequency and Google provides a lot of infomration about this as well</p> <pre><code>* * * * * command to be executed\n\u2013 \u2013 \u2013 \u2013 \u2013\n| | | | |\n| | | | +\u2014\u2013 day of week (0 \u2013 6) (Sunday=0)\n| | | +\u2014\u2014- month (1 \u2013 12)\n| | +\u2014\u2014\u2014 day of month (1 \u2013 31)\n| +\u2014\u2014\u2014\u2013 hour (0 \u2013 23)\n+\u2014\u2014\u2014\u2014- min (0 \u2013 59)\n</code></pre>"},{"location":"pages/containers/updates/#mass-changes","title":"Mass changes","text":"<p>At the bottom is a drop down for picking the update option and a frequency selection box that can be used to apply to multiple/all containers at once.</p>"},{"location":"pages/containers/updates/#all","title":"All","text":"<p>After you pick the drop down option you want and the frequency, click the <code>double up arrow</code> next to each one and it will apply that choice to all the containers</p>"},{"location":"pages/containers/updates/#selective","title":"Selective","text":"<p>After you pick the drop down option you want and the frequency, click the <code>single up arrow</code> next to each one and it will apply that choice to only the containers you have checked the box for</p>"},{"location":"pages/logs/","title":"Logs","text":"<ul> <li>Click on the name of the log to view it in the right pane</li> <li>Click on the red trash can to delete that specific log</li> <li>Logs auto rotate every 2MB</li> <li>Log retention is a setting you can adjust</li> </ul>"},{"location":"pages/logs/#crons","title":"Crons","text":"<p>These will be log files generated when the crons run</p>"},{"location":"pages/logs/#notifications","title":"Notifications","text":"<p>These will be log files generated when a notification is sent to any of the platforms</p>"},{"location":"pages/logs/#system","title":"System","text":"<p>These will be log files generated by internal usage</p>"},{"location":"pages/misc/api/","title":"API","text":""},{"location":"pages/misc/api/#authorization","title":"Authorization","text":"<p>Header <code>X-Api-Key:{apikey}</code> Parameter <code>?apikey={apikey}</code></p> <p>Examples</p> <pre><code>curl -H \"X-Api-Key:{apikey}\" \"http://{host}:9999/api/database/containers\"\ncurl \"http://{host}:9999/api/database/containers?apikey={apikey}\"\n</code></pre>"},{"location":"pages/misc/api/#responses","title":"Responses","text":"<p>All responses are JSON with possible response codes:</p> 200400401405 <p>Success</p> <p>Missing required param(s)</p> <p>Invalid apikey</p> <p>Invalid endpoint or method for the used endpoint</p> <p>Success example:</p> <pre><code>{\n    \"code\": 200,\n    \"response\": {\n        \"result\": ....\n    }\n}\n</code></pre> <p>Error example:</p> <pre><code>{\n    \"code\": 405,\n    \"error\": \"Invalid GET request (endpoint=database/fake-endpoint)\"\n}\n</code></pre>"},{"location":"pages/misc/api/#apidatabase-25","title":"/api/database/* - 25","text":""},{"location":"pages/misc/api/#containeradd","title":"container/add","text":"container/add <p>Endpoint: <code>/api/database/container/add</code> Usage: Add a containers settings to the database</p> POST Parameter Type Required <code>hash</code> str yes <code>updates</code> int no <code>frequency</code> str no <code>restartUnhealthy</code> int no <code>disableNotifications</code> int no <code>shutdownDelay</code> int no <code>shutdownDelaySeconds</code> int no"},{"location":"pages/misc/api/#containergroupadd","title":"container/group/add","text":"container/group/add <p>Endpoint: <code>/api/database/container/group/add</code> Usage: Add a new container group to the database</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containergroupdelete","title":"container/group/delete","text":"container/group/delete <p>Endpoint: <code>/api/database/container/group/delete</code> Usage: Remove a container group from the database</p> POST Parameter Type Required <code>id</code> int yes"},{"location":"pages/misc/api/#containerhash","title":"container/hash","text":"container/hash <p>Endpoint: <code>/api/database/container/hash</code> Usage: Get a container from the database using its hash</p> GET Parameter Type Required <code>hash</code> str yes"},{"location":"pages/misc/api/#containerupdate","title":"container/update","text":"container/update <p>Endpoint: <code>/api/database/container/update</code> Usage: Get a container from the database using its hash</p> POST Parameter Type Required <code>hash</code> str yes <code>updates</code> int no <code>frequency</code> str no <code>restartUnhealthy</code> int no <code>disableNotifications</code> int no <code>shutdownDelay</code> int no <code>shutdownDelaySeconds</code> int no"},{"location":"pages/misc/api/#containers","title":"containers","text":"containers <p>Endpoint: <code>/api/database/containers</code> Usage: Return a list of containers that have settings in the database</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#groupcontainerlinkadd","title":"group/container/link/add","text":"group/container/link/add <p>Endpoint: <code>/api/database/group/container/link/add</code> Usage: Add a container to a group</p> POST Parameter Type Required <code>groupId</code> int yes <code>containerId</code> int yes"},{"location":"pages/misc/api/#groupcontainerlinkremove","title":"group/container/link/remove","text":"group/container/link/remove <p>Endpoint: <code>/api/database/group/container/link/remove</code> Usage: Remove a container from a group</p> POST Parameter Type Required <code>groupId</code> int yes <code>containerId</code> int yes"},{"location":"pages/misc/api/#groupcontainerlinks","title":"group/container/links","text":"group/container/links <p>Endpoint: <code>/api/database/group/container/links</code> Usage: Return a list of containers linked to a group using its id</p> GET Parameter Type Required <code>group</code> int yes"},{"location":"pages/misc/api/#groupcontainerupdate","title":"group/container/update","text":"group/container/update <p>Endpoint: <code>/api/database/group/container/update</code> Usage: Update the container group</p> POST Parameter Type Required <code>name</code> str yes <code>id</code> int yes"},{"location":"pages/misc/api/#grouphash","title":"group/hash","text":"group/hash <p>Endpoint: <code>/api/database/group/hash</code> Usage: Get a group from the database using its hash</p> GET Parameter Type Required <code>hash</code> str yes"},{"location":"pages/misc/api/#grouplinks","title":"group/links","text":"group/links <p>Endpoint: <code>/api/database/group/links</code> Usage: Return a list of group/container links from the database</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#groups","title":"groups","text":"groups <p>Endpoint: <code>/api/database/groups</code> Usage: Return a list of groups from the database</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#migrations","title":"migrations","text":"migrations <p>Endpoint: <code>/api/database/migrations</code> Usage: Trigger a migration check</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#links","title":"links","text":"links <p>Endpoint: <code>/api/database/links</code> Usage: Return a list of notification/platform links</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#notificationlinkadd","title":"notification/link/add","text":"notification/link/add <p>Endpoint: <code>/api/database/notification/link/add</code> Usage: Add a new notification notifier to the database</p> POST Parameter Type Required <code>platformId</code> int yes <code>triggerIds</code> list yes <code>platformParameters</code> object yes <code>senderName</code> str yes"},{"location":"pages/misc/api/#notificationlinkdelete","title":"notification/link/delete","text":"notification/link/delete <p>Endpoint: <code>/api/database/notification/link/delete</code> Usage: Remove a notification notifier from the database</p> POST Parameter Type Required <code>linkId</code> str yes"},{"location":"pages/misc/api/#notificationlinkplatformname","title":"notification/link/platform/name","text":"notification/link/platform/name <p>Endpoint: <code>/api/database/notification/link/platform/name</code> Usage: Get a notification link using its name</p> GET Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#notificationlinkupdate","title":"notification/link/update","text":"notification/link/update <p>Endpoint: <code>/api/database/notification/link/update</code> Usage: Update an existing notification notifier in the database</p> POST Parameter Type Required <code>linkId</code> int yes <code>platformId</code> int yes <code>triggerIds</code> list yes <code>platformParameters</code> object yes <code>senderName</code> str yes"},{"location":"pages/misc/api/#notificationplatforms","title":"notification/platforms","text":"notification/platforms <p>Endpoint: <code>/api/database/notification/platforms</code> Usage: Return a list of notification platforms</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#notificationtriggers","title":"notification/triggers","text":"notification/triggers <p>Endpoint: <code>/api/database/notification/triggers</code> Usage: Return a list of notification triggers</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#notificationtriggerenabled","title":"notification/trigger/enabled","text":"notification/trigger/enabled <p>Endpoint: <code>/api/database/notification/trigger/enabled</code> Usage: Get enabled status for a specific notification using its id</p> GET Parameter Type Required <code>trigger</code> int yes"},{"location":"pages/misc/api/#servers","title":"servers","text":"servers <p>Endpoint: <code>/api/database/servers</code> Usage: Get/set a list of linked servers (other Dockwatch instances)</p> GETPOST <p>No parameters</p> Parameter Type Required <code>serverList</code> object yes"},{"location":"pages/misc/api/#setting","title":"setting","text":"setting <p>Endpoint: <code>/api/database/setting</code> Usage: U&amp;pdate a setting</p> POST Parameter Type Required <code>setting</code> str yes <code>value</code> any yes"},{"location":"pages/misc/api/#settings","title":"settings","text":"settings <p>Endpoint: <code>/api/database/settings</code> Usage: Get/set a list of Dockwatch settings</p> GETPOST <p>No parameters</p> Parameter Type Required <code>newSettings</code> object yes"},{"location":"pages/misc/api/#apidocker-24","title":"/api/docker/* - 24","text":""},{"location":"pages/misc/api/#containercreate","title":"container/create","text":"container/create <p>Endpoint: <code>/api/docker/container/create</code> Usage: Create a container from an inspect object</p> POST Parameter Type Required <code>inspect</code> object yes"},{"location":"pages/misc/api/#containerinspect","title":"container/inspect","text":"container/inspect <p>Endpoint: <code>/api/docker/container/inspect</code> Usage: Return information about a container</p> GET Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containerkill","title":"container/kill","text":"container/kill <p>Endpoint: <code>/api/docker/container/kill</code> Usage: Kill a container</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containerlogs","title":"container/logs","text":"container/logs <p>Endpoint: <code>/api/docker/container/logs</code> Usage: Return the logs from a container</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#containerpull","title":"container/pull","text":"container/pull <p>Endpoint: <code>/api/docker/container/pull</code> Usage: Pull a container</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containerports","title":"container/ports","text":"container/ports <p>Endpoint: <code>/api/docker/container/ports</code> Usage: Return a list of ports used by a container</p> GET Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containerremove","title":"container/remove","text":"container/remove <p>Endpoint: <code>/api/docker/container/remove</code> Usage: Remove a container</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containerrestart","title":"container/restart","text":"container/restart <p>Endpoint: <code>/api/docker/container/restart</code> Usage: Restart a container</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containerstart","title":"container/start","text":"container/start <p>Endpoint: <code>/api/docker/container/start</code> Usage: Start a container</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#containerstop","title":"container/stop","text":"container/stop <p>Endpoint: <code>/api/docker/container/stop</code> Usage: Stop a container</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#createcompose","title":"create/compose","text":"create/compose <p>Endpoint: <code>/api/docker/create/compose</code> Usage: Genertate a compose file for a container</p> GET Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#createrun","title":"create/run","text":"create/run <p>Endpoint: <code>/api/docker/create/run</code> Usage: Genertate a docker run command for a container</p> GET Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#imageremove","title":"image/remove","text":"image/remove <p>Endpoint: <code>/api/docker/image/remove</code> Usage: Remove an image</p> POST Parameter Type Required <code>image</code> str yes"},{"location":"pages/misc/api/#imagessizes","title":"images/sizes","text":"images/sizes <p>Endpoint: <code>/api/docker/images/sizes</code> Usage: Return a list of image sizes</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#networkremove","title":"network/remove","text":"network/remove <p>Endpoint: <code>/api/docker/network/remove</code> Usage: Remove a network</p> POST Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#networks","title":"networks","text":"networks <p>Endpoint: <code>/api/docker/networks</code> Usage: Return a list of the docker networks</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#orphanscontainers","title":"orphans/containers","text":"orphans/containers <p>Endpoint: <code>/api/docker/orphans/containers</code> Usage: Return a list of containers</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#orphansnetworks","title":"orphans/networks","text":"orphans/networks <p>Endpoint: <code>/api/docker/orphans/networks</code> Usage: Return a list of orphaned networks</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#orphansvolumes","title":"orphans/volumes","text":"orphans/volumes <p>Endpoint: <code>/api/docker/orphans/volumes</code> Usage: Return a list of orphaned volumes</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#permissions","title":"permissions","text":"permissions <p>Endpoint: <code>/api/docker/permissions</code> Usage: Check if the user:group has access to the docker sock</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#processlist","title":"processList","text":"processList <p>Endpoint: <code>/api/docker/processList</code> Usage: Return the current docker processlist</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#stats","title":"stats","text":"stats <p>Endpoint: <code>/api/docker/stats</code> Usage: Returns the cached information used in the UI</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#unusedcontainers","title":"unused/containers","text":"unused/containers <p>Endpoint: <code>/api/docker/unused/containers</code> Usage: Return a list of unused containers</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#volumeremove","title":"volume/remove","text":"volume/remove <p>Endpoint: <code>/api/docker/volume/remove</code> Usage: Remove a volume</p> POST Parameter Type Required <code>id</code> str yes"},{"location":"pages/misc/api/#apidockerapi-1","title":"/api/dockerAPI/* - 1","text":""},{"location":"pages/misc/api/#containercreate_1","title":"container/create","text":"container/create <p>Endpoint: <code>/api/dockerAPI/container/create</code> Usage: Recreate a container based on its inspect using the docker API</p> GET Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#apifile-5","title":"/api/file/* - 5","text":""},{"location":"pages/misc/api/#dependency","title":"dependency","text":"dependency <p>Endpoint: <code>/api/file/dependency</code> Usage: Get/set the contents of the dependency json file</p> GETPOST <p>No parameters</p> Parameter Type Required <code>contents</code> json object yes"},{"location":"pages/misc/api/#pull","title":"pull","text":"pull <p>Endpoint: <code>/api/file/pull</code> Usage: Get/set the contents of the pull json file</p> GETPOST <p>No parameters</p> Parameter Type Required <code>contents</code> json object yes"},{"location":"pages/misc/api/#sse","title":"sse","text":"sse <p>Endpoint: <code>/api/file/sse</code> Usage: Get/set the contents of the sse json file</p> GETPOST <p>No parameters</p> Parameter Type Required <code>contents</code> json object yes"},{"location":"pages/misc/api/#state","title":"state","text":"state <p>Endpoint: <code>/api/file/state</code> Usage: Get/set the contents of the state json file</p> GETPOST <p>No parameters</p> Parameter Type Required <code>contents</code> json object yes"},{"location":"pages/misc/api/#stats_1","title":"stats","text":"stats <p>Endpoint: <code>/api/file/stats</code> Usage: Get/set the contents of the stats json file</p> GETPOST <p>No parameters</p> Parameter Type Required <code>contents</code> json object yes"},{"location":"pages/misc/api/#apinotification-1","title":"/api/notification/* - 1","text":""},{"location":"pages/misc/api/#notificationtest","title":"notification/test","text":"notification/test <p>Endpoint: <code>/api/notification/test</code> Usage: Send a test notification to a specific trigger</p> POST Parameter Type Required <code>linkId</code> int yes <code>name</code> str yes"},{"location":"pages/misc/api/#apiserver-6","title":"/api/server/* - 6","text":""},{"location":"pages/misc/api/#log","title":"log","text":"log <p>Endpoint: <code>/api/server/log</code> Usage: Return a specific log contents</p> GET Parameter Type Required <code>name</code> str yes"},{"location":"pages/misc/api/#logdelete","title":"log/delete","text":"log/delete <p>Endpoint: <code>/api/server/log/delete</code> Usage: Delete a Specific log</p> POST Parameter Type Required <code>log</code> str yes"},{"location":"pages/misc/api/#logpurge","title":"log/purge","text":"log/purge <p>Endpoint: <code>/api/server/log/purge</code> Usage: Delete all logs in a group</p> POST Parameter Type Required <code>group</code> str yes"},{"location":"pages/misc/api/#ping","title":"ping","text":"ping <p>Endpoint: <code>/api/server/ping</code> Usage: Check if the instance is online</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#taskrun","title":"task/run","text":"task/run <p>Endpoint: <code>/api/server/task/run</code> Usage: Trigger a task to run</p> POST Parameter Type Required <code>task</code> str yes"},{"location":"pages/misc/api/#time","title":"time","text":"time <p>Endpoint: <code>/api/server/time</code> Usage: Check the instance timezone and current time</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#apistats-3","title":"/api/stats/* - 3","text":""},{"location":"pages/misc/api/#containers_1","title":"containers","text":"containers <p>Endpoint: <code>/api/stats/containers</code> Usage: Returns the container list to be used by dashboard apps</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#metrics","title":"metrics","text":"metrics <p>Endpoint: <code>/api/stats/metrics</code> Usage: Returns the metrics to be used by dashboard apps</p> GET <p>No parameters</p>"},{"location":"pages/misc/api/#overview","title":"overview","text":"overview <p>Endpoint: <code>/api/stats/overview</code> Usage: Returns the overview list to be used by dashboard apps</p> GET <p>No parameters</p>"},{"location":"pages/misc/composeRun/","title":"Compose/Run","text":"<p>Info</p> <p>Make sure you change the volumes, ports, etc to match your system</p>"},{"location":"pages/misc/composeRun/#environment-variables","title":"Environment variables","text":""},{"location":"pages/misc/composeRun/#volumes","title":"Volumes","text":"Name Host Container App config /mnt/disk1/appdata/dockwatch/config /config Docker sock /var/run/docker.sock /var/run/docker.sock"},{"location":"pages/misc/composeRun/#ports","title":"Ports","text":"Inside Outside 80 9999"},{"location":"pages/misc/composeRun/#variables","title":"Variables","text":"Name Key Value DOCKER_HOST (optional: only for socket proxy) DOCKER_HOST ip:port PUID PUID 1001 PGID PGID 999 TZ TZ America/New_York"},{"location":"pages/misc/composeRun/#run","title":"Run","text":"<pre><code>docker run \\\n  -d \\\n  --name \"/dockwatch\" \\\n  --volume \"/home/dockwatch/config:/config:rw\" \\\n  --volume \"/var/run/docker.sock:/var/run/docker.sock:rw\" \\\n  --restart \"unless-stopped\" \\\n  --publish \"9999:80/tcp\" \\\n  --network \"bridge\" \\\n  --env \"TZ=America/New_York\" \\\n  --env \"PUID=1001\" \\\n  --env \"PGID=999\" \\\n  \"ghcr.io/notifiarr/dockwatch:main\"\n</code></pre>"},{"location":"pages/misc/composeRun/#compose","title":"Compose","text":"<pre><code>services:\n  dockwatch:\n    container_name: dockwatch\n    image: ghcr.io/notifiarr/dockwatch:main\n    restart: unless-stopped\n    ports:\n      - 9999:80/tcp\n    environment:\n      #-DOCKER_HOST=127.0.0.1:2375 # Uncomment and adjust accordingly if you use a socket proxy\n      - PUID=1001\n      - PGID=999\n      - TZ=America/New_York\n    volumes:\n      - /home/dockwatch/config:/config\n      - /var/run/docker.sock:/var/run/docker.sock # Comment this line if you use a socket proxy\n</code></pre>"},{"location":"pages/misc/composeRun/#repository","title":"Repository","text":"<p><code>ghcr.io/notifiarr/dockwatch:main</code> Safest option, recommended branch to use <code>ghcr.io/notifiarr/dockwatch:develop</code> Typically safe <code>ghcr.io/notifiarr/dockwatch:nightly</code> Typically only used for large major changes that need testing prior to develop</p>"},{"location":"pages/misc/contributing/","title":"Contributing","text":""},{"location":"pages/misc/contributing/#option-1","title":"Option 1","text":"<ul> <li>Fork the repo</li> <li>Create a directory symlink of the forked repo to /config/www.</li> <li>Linux example: ln -s /home/user/dockwatch-git /home/user/config/www</li> <li>Windows example: mklink /D \"C:\\dockwatch-git\" \"C:\\dockwatch-config\\www\"</li> <li>Open the UI, Navigate to Settings-&gt;Development and set environment from Internal to External</li> <li>Save and restart Dockwatch container</li> </ul>"},{"location":"pages/misc/contributing/#option-2","title":"Option 2","text":"<ul> <li>Fork the repo</li> <li>Open the Dockerfile and comment out the COPY root/ / line at the bottom</li> <li>Copy the files from root/app/www/public/* to /config/www/*</li> <li>Copy the cron from root/etc/crontabs/abc to /config/crontabs/abc (You'll need to add an ENV variable for DOCKER_MODS=linuxserver/mods:universal-cron)</li> <li>Copy the ini from root/etc/php82/conf.d/dockwatch.ini to /config/php/php-local.ini</li> <li>This should allow you to run the container while making changes to the files in /config and when done, just copy the files back into the root/ directories and push your fork so it builds a new container</li> </ul>"},{"location":"pages/misc/dependencies/","title":"Dependencies","text":""},{"location":"pages/misc/dependencies/#network-dependencies","title":"Network dependencies","text":"<p>Info</p> <p>Dockwatch can automatically recognize if containers depend on specific network containers, for example Gluetun.</p> <ul> <li>Restart Gluetun -&gt; restart dependencies</li> <li>Stop Gluetun -&gt; stop dependencies</li> <li>Update Gluetun -&gt; re-create dependencies with updated network mode attached</li> </ul>"},{"location":"pages/misc/images/","title":"Images","text":""},{"location":"pages/misc/images/#unraid","title":"Unraid","text":"<ul> <li>Icons show up automatically using unraid labels</li> </ul>"},{"location":"pages/misc/images/#non-unraid","title":"Non Unraid","text":"<ul> <li>It tries to match the container image to an icon from the images repository (Feel free to add more icons to that repo for others to use)</li> <li>If the icon name is not the same as the official container image or the app has multiple container images then an alias would be used</li> </ul>"},{"location":"pages/misc/images/#internal-alias","title":"Internal alias","text":"<p>This can be modified to add more links to official images as needed and can be viewed in the repository</p>"},{"location":"pages/misc/images/#custom-alias","title":"Custom alias","text":"<p>If you have your own custom container images that you want to point to an icon:</p> <ul> <li>Create <code>/config/container-alias.json</code> and use the same format as the internal file</li> </ul> <p>Example: </p><pre><code>{\n  \"pi-hole\": [\"pihole\"],\n  \"https://www.pgadmin.org/static/COMPILED/assets/img/postgres-alt.svg\": [\"pgadmin4\"]\n  \"/config/images/vaultwarden.png\": [\"vaultwarden/server\"]\n}\n</code></pre><p></p> <p>Info</p> <p>Dockwatch supports pointing to the images repository, an arbitrary URL or a local image</p> <p>In the file there is a <code>\"key\":\"value\"</code> which determines where to find the image and which containers to apply them to</p> <p>Key (where the image is):</p> <ul> <li>Notifiarr image repo file name (1st example)</li> <li>Full url (2nd example)</li> <li>Absolute local path relative to the container (3rd example)</li> </ul> <p>Value (container/image)</p> <ul> <li>Container names (1st example)</li> <li>Image names (2nd example)</li> <li>Full image names (3rd example)</li> </ul>"},{"location":"pages/misc/logins/","title":"Logins","text":"<p>Warning</p> <p>It is strongly recommended to use a reverse proxy with authentication instead.</p> <p>Dockwatch has basic functionality for protecting the UI with a username and password.</p> <ul> <li>Create file logins in /config (should be <code>/config/logins</code>)</li> <li>Add <code>admin:password</code> to the file and save it (change this to your login)</li> <li>For multiple logins, drop a line and add another <code>admin:password</code></li> </ul> <p>There are settings to limit the amount of login failures and the timeout length for failed logins</p>"},{"location":"pages/misc/proxy/","title":"Socket proxy","text":"<p>Warning</p> <p>Make sure the socket proxy runs on the same network as Dockwatch</p> <p>Dockwatch is compatible with a Socket proxy &amp; tested with:</p> <ul> <li>LSIO</li> <li>Tecnativa</li> </ul> <p>You need to enable the following (possibly more based on the version, future added permissions to the proxy, etc):</p> <pre><code>    - ALLOW_START=1\n    - ALLOW_STOP=1\n    - ALLOW_RESTARTS=1\n    - CONTAINERS=1\n    - IMAGES=1\n    - PORTS=1\n    - NETWORKS=1\n    - POST=1\n    - VOLUMES=1\n</code></pre> <p>You also need to make sure and use the <code>DOCKER_HOST</code> variable (--env or compose environment) with the example value <code>http://socket-proxy:2375</code> (this points to your socket-proxy container)</p>"},{"location":"pages/misc/requirements/","title":"Requirements","text":""},{"location":"pages/misc/requirements/#docker","title":"Docker","text":"<ul> <li>Docker v25 or later</li> <li>Docker compose v2.27 or later</li> </ul>"},{"location":"pages/misc/requirements/#permissions","title":"Permissions","text":"<p>Info</p> <p>Dockwatch needs to be able to run docker based commands in order to function so this is important, alternative to Dockwatch using the docker.sock is if you use a Socket proxy</p> <p>Get the group id that docker uses with the following command</p> <pre><code>grep docker /etc/group\n</code></pre> <p>Get the user id from the user you want to run Dockwatch as with the following command:</p> <pre><code>id -u &lt;username&gt;\n</code></pre>"},{"location":"pages/misc/swarm/","title":"Swarm","text":"<p>If you utilize docker swarm, this can still be used.</p> <ol> <li>Install Dockwatch on each of the swarm nodes</li> <li>Pick whichever instance you want to be your \"main\" instance</li> <li>Get the url and apikey from each node instance and add them to the servers section in the settings</li> </ol> <p>Now you will have a drop down menu above the navigation that allows you to hop between each Dockwatch instance and control each one from a single interface</p>"},{"location":"pages/notifications/notifiarr/","title":"Notifiarr","text":"<p>I would suggest if you have not already, you create an integration specific key for Dockwatch in your profile on the Notifiarr site.</p> <p>Once you have the apikey, click the + for the Notifiarr platform and add your apikey to it and enable the triggers you want to send to Notifiarr. On the Notifiarr site setup the channels, etc for the notifications</p> <p>You can opt to send the same triggers to multiple Notifiarr accounts via different apikeys as well</p>"},{"location":"pages/notifications/telegram/","title":"Telegram","text":"<p>You will need to create a bot in Telegram via the Godfather bot to obtain a Telegram bot token. If you already have one, you can use that as well. Once you do that you will need to get the chat_id for the channel you want to send the notifications to. There is documentation on how to do this online but the one I used for testing was a gist on Github</p> <p>After you have the token and the chat_id you can add them to the platform and receive notifications</p>"},{"location":"pages/orphans/","title":"Orphans","text":"<p>The orphans page will show you everything docker consideres orphaned and not in use</p> <p>Info</p> <p>All orphans can be automatically cleaned up by using the Auto Prune setting</p>"},{"location":"pages/orphans/#images","title":"Images","text":"<p>These are images that docker says should be able to be deleted safely. The command that fetches this list is also on the page so it can be run manually in your shell for verification</p> <p>Image command</p> <pre><code>docker images -f dangling=true\n</code></pre>"},{"location":"pages/orphans/#volumes","title":"Volumes","text":"<p>These are volumes that are no longer in use. Docker does not provide the actual paths where these volumes once pointed to so all that is available is the internal docker hash for the orphaned volume and the internal docker mount hash.</p> <p>Volume command</p> <pre><code>docker volume ls -qf dangling=true\n</code></pre>"},{"location":"pages/orphans/#networks","title":"Networks","text":"<p>These are past networks that where used and during updates have been new ids assigned to them so the old one is not in use anymore</p> <p>Network command</p> <pre><code>docker network ls -qf dangling=true\n</code></pre>"},{"location":"pages/overview/","title":"Overview","text":"<p>This page is used as a \"Dashboard\" of sorts to get a quick glance of technical information</p>"},{"location":"pages/overview/#status","title":"Status","text":"<p>This card shows the current container status of what is running or stopped</p>"},{"location":"pages/overview/#health","title":"Health","text":"<p>This card shows health information for containers that support the health checks</p>"},{"location":"pages/overview/#updates","title":"Updates","text":"<p>This card shows the amount of containers that are up-to-date and how many that are not</p>"},{"location":"pages/overview/#usage","title":"Usage","text":"<p>This card shows server information such as disk usage, cpu usage, memory usage, etc as reported from dockers perspective</p>"},{"location":"pages/overview/#network","title":"Network","text":"<p>This card shows a list of all the docker networks in your setup and how many containers are on each network</p>"},{"location":"pages/overview/#ports","title":"Ports","text":"<p>This card shows a list of all containers that use a port and what port or port ranges they use</p>"},{"location":"pages/settings/containers/","title":"Containers","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table.  If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/settings/development/","title":"Development","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table.  If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/settings/general/","title":"General","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table.  If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/settings/logging/","title":"Logging","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table.  If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/settings/logins/","title":"Logins","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table.  If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/settings/prune/","title":"Prune","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table. If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/settings/servers/","title":"Servers","text":"<p>Warning</p> <p>Some features can not be controlled remotely as it can cause loops or issues in the main instance. Updating a remote instance, managing remote instance server settings, etc are some as an example. Almost everything is managemeable on remotes from the main instance.</p> <p>If you install multiple Dockwatch instances on multiple servers, you can optionally control them all from the same interface.</p> <ul> <li>Server 1</li> <li>Server 2</li> <li>Server 3</li> </ul> <p>When you install Dockwatch it sets an apikey for it by default and names the instance localhost. You can change the instance name for the multi-server drop down to whatever you want. </p> <p>Lets say <code>Server 1</code> is going to be the main instance here so you need to open Server 2 and go to its settings. Copy the apikey from Server 2 and in the Server 1 settings you will add the url to Server 2, the apikey and give it a name. Repeat this process for Server 3 and save the settings on Server 1.</p> <p>Now when the page reloads you will have a drop down menu above the navigation with all the connected servers (Servers 1-3) to pick from. Whatever page you are on will reload with the remote server data if you swap between them.</p>"},{"location":"pages/settings/sse/","title":"SSE","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table.  If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/settings/thresholds/","title":"Thresholds","text":"<p>Most everything in this section is well covered in the <code>Description</code> section of the table.  If there are things in the future that need more explanation we will add it here.</p>"},{"location":"pages/tasks/","title":"Tasks","text":""},{"location":"pages/tasks/#crons","title":"Crons","text":"<p>You can choose to disable crons you dont want to run although there really is no need to do this and can cause other issues if they can not run on schedule</p> <p>If you want to trigger a cron to run right now, click the hourglass icon next to it and you will see the output in the panel to the right</p>"},{"location":"pages/tasks/#files","title":"Files","text":"<p>If you need to view a file and do not want to open it on disk, you can view them here. This is mainly used for troubleshooting purposes as well</p>"}]}